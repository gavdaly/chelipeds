name: Build, Push & Sign (bootc 43) + ISO (multi-arch)
on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-images:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    strategy:
      matrix:
        arch: [amd64, arm64]
    env:
      IMAGE: ghcr.io/${{ github.repository_owner }}/chelipeds
      TAG: "43"
    steps:
      - uses: actions/checkout@v4

      - name: Compute date tag
        id: vars
        run: echo "DATE_TAG=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Install Podman + QEMU
        run: |
          sudo apt-get update
          sudo apt-get install -y podman qemu-user-static

      - name: Login to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | podman login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Build ${{ matrix.arch }}
        run: |
          podman build \
            --platform linux/${{ matrix.arch }} \
            -t $IMAGE:${TAG}-${{ matrix.arch }} \
            -t $IMAGE:${TAG}-${DATE_TAG}-${{ matrix.arch }} \
            .

      - name: Push ${{ matrix.arch }} images
        run: |
          podman push $IMAGE:${TAG}-${{ matrix.arch }}
          podman push $IMAGE:${TAG}-${DATE_TAG}-${{ matrix.arch }}

  create-manifests:
    runs-on: ubuntu-latest
    needs: build-images
    permissions:
      contents: write
      packages: write
      id-token: write
    env:
      IMAGE: ghcr.io/${{ github.repository_owner }}/chelipeds
      TAG: "43"
    steps:
      - name: Compute date tag
        id: vars
        run: echo "DATE_TAG=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Install Podman and Skopeo
        run: |
          sudo apt-get update
          sudo apt-get install -y podman skopeo

      - name: Login to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | podman login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Create manifest lists
        run: |
          podman manifest create $IMAGE:${TAG}
          podman manifest add $IMAGE:${TAG} $IMAGE:${TAG}-amd64
          podman manifest add $IMAGE:${TAG} $IMAGE:${TAG}-arm64

          podman manifest create $IMAGE:${TAG}-${DATE_TAG}
          podman manifest add $IMAGE:${TAG}-${DATE_TAG} $IMAGE:${TAG}-${DATE_TAG}-amd64
          podman manifest add $IMAGE:${TAG}-${DATE_TAG} $IMAGE:${TAG}-${DATE_TAG}-arm64

      - name: Push manifest lists
        run: |
          podman manifest push $IMAGE:${TAG}
          podman manifest push $IMAGE:${TAG}-${DATE_TAG}

      - name: Get manifest digests
        run: |
          DIGEST_TAG=$(skopeo inspect docker://$IMAGE:${TAG} --format "{{.Digest}}")
          DIGEST_DATE_TAG=$(skopeo inspect docker://$IMAGE:${TAG}-${DATE_TAG} --format "{{.Digest}}")
          echo "DIGEST_TAG=$DIGEST_TAG" >> $GITHUB_ENV
          echo "DIGEST_DATE_TAG=$DIGEST_DATE_TAG" >> $GITHUB_ENV
          echo "Manifest digest for $IMAGE:${TAG} -> $DIGEST_TAG"
          echo "Manifest digest for $IMAGE:${TAG}-${DATE_TAG} -> $DIGEST_DATE_TAG"

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: Cosign sign images (keyless)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | cosign login ghcr.io -u ${{ github.repository_owner }} --password-stdin
          cosign sign --yes --recursive $IMAGE@$DIGEST_TAG
          cosign sign --yes --recursive $IMAGE@$DIGEST_DATE_TAG

  build-iso:
    runs-on: ubuntu-latest
    needs: create-manifests
    permissions:
      contents: write
      packages: write
      id-token: write
    env:
      IMAGE: ghcr.io/${{ github.repository_owner }}/chelipeds
      TAG: "43"
    steps:
      - uses: actions/checkout@v4

      - name: Install Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman

      - name: Login to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | podman login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Pull target image
        run: |
          sudo podman pull $IMAGE:${TAG}-amd64

      - name: Build bootable ISO (amd64)
        run: |
          mkdir -p output
          sudo podman run --privileged --rm \
            -v /var/lib/containers/storage:/var/lib/containers/storage \
            -v ${{ github.workspace }}/output:/output \
            --security-opt label=disable \
            quay.io/centos-bootc/bootc-image-builder:latest \
            --type iso \
            $IMAGE:${TAG}-amd64

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: Cosign sign ISO
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          ISO=$(ls output/*.iso | head -n1)
          cosign sign-blob "$ISO" --output-signature "$ISO.sig"
          echo "Signed $ISO -> $ISO.sig"

      - name: Upload ISO + signature
        uses: actions/upload-artifact@v4
        with:
          name: chelipeds-iso-43
          path: |
            output/*.iso
            output/*.iso.sig

      # (optional) upload to Cloudflare R2
      # - name: Install rclone
      #   run: curl https://rclone.org/install.sh | sudo bash
      # - name: Upload ISO to Cloudflare R2
      #   env:
      #     RCLONE_CONFIG_R2_TYPE: s3
      #     RCLONE_CONFIG_R2_PROVIDER: Cloudflare
      #     RCLONE_CONFIG_R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      #     RCLONE_CONFIG_R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
      #     RCLONE_CONFIG_R2_ENDPOINT: https://${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com
      #     R2_BUCKET: ${{ secrets.R2_BUCKET }}
      #   run: |
      #     rclone copy output/*.iso r2:${R2_BUCKET}/chelipeds/
      #     rclone copy output/*.iso.sig r2:${R2_BUCKET}/chelipeds/
