name: Build, Push & Sign (bootc 43) + ISO (multi-arch)
on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-images:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    strategy:
      matrix:
        arch: [amd64]
    env:
      TAG: "43"
    steps:
      - uses: actions/checkout@v4

      - name: Set image name
        run: echo "IMAGE=ghcr.io/$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')/chelipeds" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
          key: ${{ runner.os }}-deps-${{ hashFiles('Containerfile', '.github/workflows/build-iso.yml') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Compute date tag
        run: echo "DATE_TAG=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Install Podman + QEMU
        run: |
          sudo apt-get update
          sudo apt-get install -y podman qemu-user-static

      - name: Login to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | podman login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build ${{ matrix.arch }}
        run: |
          podman build \
            --platform linux/${{ matrix.arch }} \
            -t $IMAGE:${TAG}-${{ matrix.arch }} \
            -t $IMAGE:${TAG}-${DATE_TAG}-${{ matrix.arch }} \
            -t $IMAGE:latest-${{ matrix.arch }} \
            .

      - name: Push ${{ matrix.arch }} images
        run: |
          podman push $IMAGE:${TAG}-${{ matrix.arch }}
          podman push $IMAGE:${TAG}-${DATE_TAG}-${{ matrix.arch }}
          podman push $IMAGE:latest-${{ matrix.arch }}

  create-manifests:
    runs-on: ubuntu-latest
    needs: build-images
    permissions:
      contents: write
      packages: write
      id-token: write
    env:
      TAG: "43"
      ARCH_LIST: "amd64"
    steps:
      - uses: actions/checkout@v4

      - name: Set image name
        run: echo "IMAGE=ghcr.io/$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')/chelipeds" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
          key: ${{ runner.os }}-deps-manifests-${{ hashFiles('.github/workflows/build-iso.yml') }}
          restore-keys: |
            ${{ runner.os }}-deps-manifests-

      - name: Compute date tag
        run: echo "DATE_TAG=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Install Podman and Skopeo
        run: |
          sudo apt-get update
          sudo apt-get install -y podman skopeo

      - name: Login to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | podman login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Create manifest lists
        run: |
          podman manifest create $IMAGE:${TAG}
          for ARCH in $ARCH_LIST; do
            podman manifest add $IMAGE:${TAG} docker://$IMAGE:${TAG}-$ARCH
          done

          podman manifest create $IMAGE:${TAG}-${DATE_TAG}
          for ARCH in $ARCH_LIST; do
            podman manifest add $IMAGE:${TAG}-${DATE_TAG} docker://$IMAGE:${TAG}-${DATE_TAG}-$ARCH
          done

          podman manifest create $IMAGE:latest
          for ARCH in $ARCH_LIST; do
            podman manifest add $IMAGE:latest docker://$IMAGE:latest-$ARCH
          done

      - name: Push manifest lists
        run: |
          podman manifest push --all $IMAGE:${TAG} docker://$IMAGE:${TAG}
          podman manifest push --all $IMAGE:${TAG}-${DATE_TAG} docker://$IMAGE:${TAG}-${DATE_TAG}
          podman manifest push --all $IMAGE:latest docker://$IMAGE:latest

      - name: Get manifest digests
        run: |
          DIGEST_TAG=$(skopeo inspect docker://$IMAGE:${TAG} --format "{{.Digest}}")
          DIGEST_DATE_TAG=$(skopeo inspect docker://$IMAGE:${TAG}-${DATE_TAG} --format "{{.Digest}}")
          DIGEST_LATEST=$(skopeo inspect docker://$IMAGE:latest --format "{{.Digest}}")
          echo "DIGEST_TAG=$DIGEST_TAG" >> $GITHUB_ENV
          echo "DIGEST_DATE_TAG=$DIGEST_DATE_TAG" >> $GITHUB_ENV
          echo "DIGEST_LATEST=$DIGEST_LATEST" >> $GITHUB_ENV

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: Cosign sign images (keyless with GHCR auth)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | cosign login ghcr.io -u ${{ github.actor }} --password-stdin
          cosign sign --yes --recursive $IMAGE@$DIGEST_TAG
          cosign sign --yes --recursive $IMAGE@$DIGEST_DATE_TAG
          cosign sign --yes --recursive $IMAGE@$DIGEST_LATEST

  build-iso:
    runs-on: ${{ matrix.runner }}
    needs: create-manifests
    strategy:
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-latest
    environment: Actions
    permissions:
      contents: write
      packages: write
      id-token: write
    env:
      TAG: "43"
      R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
      R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
    steps:
      - uses: actions/checkout@v4

      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf $AGENT_TOOLSDIRECTORY

      - name: Set image name
        run: echo "IMAGE=ghcr.io/$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')/chelipeds" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/containers/storage
          key: ${{ runner.os }}-deps-iso-${{ hashFiles('Containerfile', '.github/workflows/build-iso.yml') }}
          restore-keys: |
            ${{ runner.os }}-deps-iso-

      - name: Install Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman

      - name: Login to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | sudo podman login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Pull target image
        run: |
          sudo podman pull $IMAGE:${TAG}-${{ matrix.arch }}

      - name: Build bootable ISO (${{ matrix.arch }})
        run: |
          mkdir -p output
          echo "Starting bootc-image-builder with image: $IMAGE:${TAG}-${{ matrix.arch }}"
          echo "Output directory: ${{ github.workspace }}/output"

          sudo podman run --privileged --rm \
            -v /var/lib/containers/storage:/var/lib/containers/storage \
            -v ${{ github.workspace }}/output:/output \
            --security-opt label=disable \
            quay.io/centos-bootc/bootc-image-builder:latest \
            --type iso \
            --rootfs ext4 \
            $IMAGE:${TAG}-${{ matrix.arch }} || {
              echo "bootc-image-builder failed with exit code $?"
              ls -la ${{ github.workspace }}/output/ || true
              exit 1
            }

          sudo chown -R $(id -u):$(id -g) ${{ github.workspace }}/output || true
          ls -la ${{ github.workspace }}/output/

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: Locate ISO artifacts
        id: locate_iso
        run: |
          ISO_LIST=$(find output -maxdepth 5 -type f -name '*.iso' -print | sort)
          [ -z "$ISO_LIST" ] && { echo "No ISO found"; exit 1; }
          echo "$ISO_LIST" > output/iso-files.txt
          echo "iso_list_file=output/iso-files.txt" >> "$GITHUB_OUTPUT"

      - name: Cosign sign ISO
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          ISO_LIST_FILE="${{ steps.locate_iso.outputs.iso_list_file }}"
          while IFS= read -r ISO; do
            [ -z "$ISO" ] && continue
            SIG="${ISO}.sig"
            cosign sign-blob --yes "$ISO" --output-signature "$SIG"
          done < "$ISO_LIST_FILE"

      - name: Upload ISO + signature
        uses: actions/upload-artifact@v4
        with:
          name: chelipeds-iso-43-${{ matrix.arch }}
          path: |
            output/**/*.iso
            output/**/*.iso.sig

      - name: Verify R2 Secrets for Upload
        run: |
          for var in R2_ACCESS_KEY_ID R2_SECRET_ACCESS_KEY R2_ACCOUNT_ID; do
            if [ -z "${!var}" ]; then
              echo "::error::$var is not set."
              exit 1
            fi
          done

      - name: Install rclone
        run: curl https://rclone.org/install.sh | sudo bash
      - name: Upload ISO to Cloudflare R2
        env:
          RCLONE_CONFIG_R2_TYPE: s3
          RCLONE_CONFIG_R2_PROVIDER: Cloudflare
          RCLONE_CONFIG_R2_ACCESS_KEY_ID: ${{ env.R2_ACCESS_KEY_ID }}
          RCLONE_CONFIG_R2_SECRET_ACCESS_KEY: ${{ env.R2_SECRET_ACCESS_KEY }}
          RCLONE_CONFIG_R2_ENDPOINT: https://${{ env.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com
          R2_BUCKET: chelipeds
        run: |
          ISO_LIST_FILE="${{ steps.locate_iso.outputs.iso_list_file }}"
          while IFS= read -r ISO; do
            [ -z "$ISO" ] && continue
            SIG="${ISO}.sig"
            BASENAME=$(basename "$ISO")
            SIG_BASENAME=$(basename "$SIG")
            rclone copyto "$ISO" "r2:${R2_BUCKET}/$BASENAME"
            rclone copyto "$SIG" "r2:${R2_BUCKET}/$SIG_BASENAME"
          done < "$ISO_LIST_FILE"
